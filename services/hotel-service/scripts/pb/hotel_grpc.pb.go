// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: PATH/hotel.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HotelService_GetHotelById_FullMethodName              = "/hotel.HotelService/GetHotelById"
	HotelService_CreateHotel_FullMethodName               = "/hotel.HotelService/CreateHotel"
	HotelService_SimpleRpc_FullMethodName                 = "/hotel.HotelService/SimpleRpc"
	HotelService_ServerStreamingRpc_FullMethodName        = "/hotel.HotelService/ServerStreamingRpc"
	HotelService_ClientStreamingRpc_FullMethodName        = "/hotel.HotelService/ClientStreamingRpc"
	HotelService_BidirectionalStreamingRpc_FullMethodName = "/hotel.HotelService/BidirectionalStreamingRpc"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	GetHotelById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error)
	// Tutorial
	SimpleRpc(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ServerStreamingRpc(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimpleResponse], error)
	ClientStreamingRpc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SimpleRequest, SimpleResponse], error)
	BidirectionalStreamingRpc(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleRequest, SimpleResponse], error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) GetHotelById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIdResponse)
	err := c.cc.Invoke(ctx, HotelService_GetHotelById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_CreateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) SimpleRpc(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, HotelService_SimpleRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) ServerStreamingRpc(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimpleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HotelService_ServiceDesc.Streams[0], HotelService_ServerStreamingRpc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleRequest, SimpleResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HotelService_ServerStreamingRpcClient = grpc.ServerStreamingClient[SimpleResponse]

func (c *hotelServiceClient) ClientStreamingRpc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SimpleRequest, SimpleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HotelService_ServiceDesc.Streams[1], HotelService_ClientStreamingRpc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleRequest, SimpleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HotelService_ClientStreamingRpcClient = grpc.ClientStreamingClient[SimpleRequest, SimpleResponse]

func (c *hotelServiceClient) BidirectionalStreamingRpc(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleRequest, SimpleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HotelService_ServiceDesc.Streams[2], HotelService_BidirectionalStreamingRpc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleRequest, SimpleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HotelService_BidirectionalStreamingRpcClient = grpc.BidiStreamingClient[SimpleRequest, SimpleResponse]

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility.
type HotelServiceServer interface {
	GetHotelById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error)
	CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error)
	// Tutorial
	SimpleRpc(context.Context, *SimpleRequest) (*SimpleResponse, error)
	ServerStreamingRpc(*SimpleRequest, grpc.ServerStreamingServer[SimpleResponse]) error
	ClientStreamingRpc(grpc.ClientStreamingServer[SimpleRequest, SimpleResponse]) error
	BidirectionalStreamingRpc(grpc.BidiStreamingServer[SimpleRequest, SimpleResponse]) error
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotelServiceServer struct{}

func (UnimplementedHotelServiceServer) GetHotelById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelById not implemented")
}
func (UnimplementedHotelServiceServer) CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (UnimplementedHotelServiceServer) SimpleRpc(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRpc not implemented")
}
func (UnimplementedHotelServiceServer) ServerStreamingRpc(*SimpleRequest, grpc.ServerStreamingServer[SimpleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingRpc not implemented")
}
func (UnimplementedHotelServiceServer) ClientStreamingRpc(grpc.ClientStreamingServer[SimpleRequest, SimpleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingRpc not implemented")
}
func (UnimplementedHotelServiceServer) BidirectionalStreamingRpc(grpc.BidiStreamingServer[SimpleRequest, SimpleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingRpc not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}
func (UnimplementedHotelServiceServer) testEmbeddedByValue()                      {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	// If the following call pancis, it indicates UnimplementedHotelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_GetHotelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotelById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_CreateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotel(ctx, req.(*CreateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_SimpleRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).SimpleRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_SimpleRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).SimpleRpc(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_ServerStreamingRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HotelServiceServer).ServerStreamingRpc(m, &grpc.GenericServerStream[SimpleRequest, SimpleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HotelService_ServerStreamingRpcServer = grpc.ServerStreamingServer[SimpleResponse]

func _HotelService_ClientStreamingRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HotelServiceServer).ClientStreamingRpc(&grpc.GenericServerStream[SimpleRequest, SimpleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HotelService_ClientStreamingRpcServer = grpc.ClientStreamingServer[SimpleRequest, SimpleResponse]

func _HotelService_BidirectionalStreamingRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HotelServiceServer).BidirectionalStreamingRpc(&grpc.GenericServerStream[SimpleRequest, SimpleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HotelService_BidirectionalStreamingRpcServer = grpc.BidiStreamingServer[SimpleRequest, SimpleResponse]

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hotel.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHotelById",
			Handler:    _HotelService_GetHotelById_Handler,
		},
		{
			MethodName: "CreateHotel",
			Handler:    _HotelService_CreateHotel_Handler,
		},
		{
			MethodName: "SimpleRpc",
			Handler:    _HotelService_SimpleRpc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingRpc",
			Handler:       _HotelService_ServerStreamingRpc_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingRpc",
			Handler:       _HotelService_ClientStreamingRpc_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingRpc",
			Handler:       _HotelService_BidirectionalStreamingRpc_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "PATH/hotel.proto",
}
